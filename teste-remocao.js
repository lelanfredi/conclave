// üß™ TESTE ESPEC√çFICO - REMO√á√ÉO DE PARTICIPANTES
// Simula o processo de remo√ß√£o para identificar problemas

console.log("üß™ TESTE DE REMO√á√ÉO DE PARTICIPANTES");
console.log("=" .repeat(50));

// Simular dados de participantes
const participantes = [
  { id: "1", real_name: "Jo√£o Silva", cardinal_name: "Cardeal Z√© da Pamonha", created_at: "2025-01-26T10:00:00Z" },
  { id: "2", real_name: "Maria Santos", cardinal_name: "Cardeal Maria do Milho", created_at: "2025-01-26T10:01:00Z" },
  { id: "3", real_name: "Pedro Costa", cardinal_name: "Cardeal Pedro do Quent√£o", created_at: "2025-01-26T10:02:00Z" }
];

// Simular votos
const votos = [
  { id: "1", participant_id: "1", candidate_id: "2", round: 1, created_at: "2025-01-26T10:05:00Z" },
  { id: "2", participant_id: "2", candidate_id: "1", round: 1, created_at: "2025-01-26T10:06:00Z" },
  { id: "3", participant_id: "3", candidate_id: "1", round: 1, created_at: "2025-01-26T10:07:00Z" }
];

// Simular localStorage
const localStorage = {
  data: {
    participants: JSON.stringify(participantes),
    votes: JSON.stringify(votos)
  },
  getItem: function(key) {
    return this.data[key] || null;
  },
  setItem: function(key, value) {
    this.data[key] = value;
    console.log(`üíæ localStorage.setItem("${key}", ${value})`);
  }
};

// Fun√ß√£o para simular remo√ß√£o (modo localStorage)
function simularRemocaoLocalStorage(participantId) {
  console.log(`\nüóëÔ∏è Removendo participante ID: ${participantId}`);
  
  try {
    // 1. Verificar se participante existe
    const storedParticipants = localStorage.getItem("participants");
    if (!storedParticipants) {
      throw new Error("Nenhum participante encontrado no localStorage");
    }
    
    const participants = JSON.parse(storedParticipants);
    const participantToRemove = participants.find(p => p.id === participantId);
    
    if (!participantToRemove) {
      throw new Error(`Participante com ID ${participantId} n√£o encontrado`);
    }
    
    console.log(`‚úÖ Participante encontrado: ${participantToRemove.cardinal_name}`);
    
    // 2. Remover participante
    const filteredParticipants = participants.filter(p => p.id !== participantId);
    localStorage.setItem("participants", JSON.stringify(filteredParticipants));
    console.log(`‚úÖ Participante removido da lista`);
    
    // 3. Remover votos do participante
    const storedVotes = localStorage.getItem("votes");
    if (storedVotes) {
      const votes = JSON.parse(storedVotes);
      const filteredVotes = votes.filter(v => v.participant_id !== participantId);
      localStorage.setItem("votes", JSON.stringify(filteredVotes));
      console.log(`‚úÖ Votos do participante removidos`);
    }
    
    // 4. Verificar resultado
    const newParticipants = JSON.parse(localStorage.getItem("participants"));
    const newVotes = JSON.parse(localStorage.getItem("votes"));
    
    console.log(`\nüìä RESULTADO DA REMO√á√ÉO:`);
    console.log(`Participantes restantes: ${newParticipants.length}`);
    console.log(`Votos restantes: ${newVotes.length}`);
    
    return true;
    
  } catch (error) {
    console.error(`‚ùå Erro na remo√ß√£o: ${error.message}`);
    return false;
  }
}

// Fun√ß√£o para simular remo√ß√£o (modo Supabase)
function simularRemocaoSupabase(participantId) {
  console.log(`\nüóëÔ∏è Removendo participante ID: ${participantId} (modo Supabase)`);
  
  try {
    // Simular opera√ß√µes do Supabase
    console.log(`1. Removendo votos do participante ${participantId}...`);
    console.log(`2. Removendo participante ${participantId} da tabela...`);
    
    // Simular erro comum do Supabase
    const possiveisErros = [
      "Foreign key constraint violation",
      "Row Level Security (RLS) policy violation", 
      "Table does not exist",
      "Permission denied",
      "Connection timeout"
    ];
    
    // Simular erro aleat√≥rio (para teste)
    if (Math.random() < 0.3) {
      const erro = possiveisErros[Math.floor(Math.random() * possiveisErros.length)];
      throw new Error(`Erro do Supabase: ${erro}`);
    }
    
    console.log(`‚úÖ Participante removido com sucesso do Supabase`);
    return true;
    
  } catch (error) {
    console.error(`‚ùå Erro do Supabase: ${error.message}`);
    return false;
  }
}

// Testar diferentes cen√°rios
function testarCenariosRemocao() {
  console.log("üß™ TESTANDO CEN√ÅRIOS DE REMO√á√ÉO:");
  console.log("-".repeat(40));
  
  // Cen√°rio 1: Remo√ß√£o normal
  console.log("\nüéØ Cen√°rio 1: Remo√ß√£o normal");
  simularRemocaoLocalStorage("2");
  
  // Cen√°rio 2: Remo√ß√£o de participante inexistente
  console.log("\nüéØ Cen√°rio 2: Participante inexistente");
  simularRemocaoLocalStorage("999");
  
  // Cen√°rio 3: Remo√ß√£o com Supabase
  console.log("\nüéØ Cen√°rio 3: Modo Supabase");
  simularRemocaoSupabase("1");
  
  // Cen√°rio 4: Remo√ß√£o de √∫ltimo participante
  console.log("\nüéØ Cen√°rio 4: √öltimo participante");
  simularRemocaoLocalStorage("1");
  simularRemocaoLocalStorage("3");
}

// Verificar problemas comuns
function verificarProblemasComuns() {
  console.log("\nüîç VERIFICANDO PROBLEMAS COMUNS:");
  console.log("-".repeat(40));
  
  const problemas = [
    {
      problema: "Erro de Foreign Key no Supabase",
      causa: "Tentativa de remover participante com votos ativos",
      solucao: "Remover votos antes do participante"
    },
    {
      problema: "Erro de RLS (Row Level Security)",
      causa: "Pol√≠tica de seguran√ßa bloqueando remo√ß√£o",
      solucao: "Configurar RLS policies corretamente"
    },
    {
      problema: "Erro de localStorage",
      causa: "Dados corrompidos ou formato inv√°lido",
      solucao: "Validar dados antes de salvar"
    },
    {
      problema: "Erro de estado React",
      causa: "Estado n√£o atualizado ap√≥s remo√ß√£o",
      solucao: "Chamar loadData() ap√≥s remo√ß√£o"
    },
    {
      problema: "Erro de confirma√ß√£o",
      causa: "Confirm dialog n√£o funcionando",
      solucao: "Verificar se confirm() est√° dispon√≠vel"
    }
  ];
  
  problemas.forEach((item, index) => {
    console.log(`\n${index + 1}. ${item.problema}`);
    console.log(`   Causa: ${item.causa}`);
    console.log(`   Solu√ß√£o: ${item.solucao}`);
  });
}

// Executar testes
function executarTestesRemocao() {
  console.log("üöÄ Iniciando testes de remo√ß√£o...\n");
  
  testarCenariosRemocao();
  verificarProblemasComuns();
  
  console.log("\n" + "=".repeat(50));
  console.log("üß™ TESTES DE REMO√á√ÉO CONCLU√çDOS!");
  console.log("üí° Verifique o console do navegador para erros espec√≠ficos");
  console.log("üîß Problemas comuns identificados acima");
  console.log("=".repeat(50));
}

// Executar
executarTestesRemocao(); 